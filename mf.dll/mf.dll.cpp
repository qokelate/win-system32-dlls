#include <windows.h>
#include <shlwapi.h>

extern "C" {
extern void *ptr_AppendPropVariant;
void *ptr_AppendPropVariant = NULL;
extern void *ptr_ConvertPropVariant;
void *ptr_ConvertPropVariant = NULL;
extern void *ptr_CopyPropertyStore;
void *ptr_CopyPropertyStore = NULL;
extern void *ptr_CreateNamedPropertyStore;
void *ptr_CreateNamedPropertyStore = NULL;
extern void *ptr_DllCanUnloadNow;
void *ptr_DllCanUnloadNow = NULL;
extern void *ptr_DllGetClassObject;
void *ptr_DllGetClassObject = NULL;
extern void *ptr_DllRegisterServer;
void *ptr_DllRegisterServer = NULL;
extern void *ptr_DllUnregisterServer;
void *ptr_DllUnregisterServer = NULL;
extern void *ptr_ExtractPropVariant;
void *ptr_ExtractPropVariant = NULL;
extern void *ptr_MFCreate3GPMediaSink;
void *ptr_MFCreate3GPMediaSink = NULL;
extern void *ptr_MFCreateASFByteStreamPlugin;
void *ptr_MFCreateASFByteStreamPlugin = NULL;
extern void *ptr_MFCreateASFContentInfo;
void *ptr_MFCreateASFContentInfo = NULL;
extern void *ptr_MFCreateASFIndexer;
void *ptr_MFCreateASFIndexer = NULL;
extern void *ptr_MFCreateASFIndexerByteStream;
void *ptr_MFCreateASFIndexerByteStream = NULL;
extern void *ptr_MFCreateASFMediaSink;
void *ptr_MFCreateASFMediaSink = NULL;
extern void *ptr_MFCreateASFMediaSinkActivate;
void *ptr_MFCreateASFMediaSinkActivate = NULL;
extern void *ptr_MFCreateASFMultiplexer;
void *ptr_MFCreateASFMultiplexer = NULL;
extern void *ptr_MFCreateASFProfile;
void *ptr_MFCreateASFProfile = NULL;
extern void *ptr_MFCreateASFProfileFromPresentationDescriptor;
void *ptr_MFCreateASFProfileFromPresentationDescriptor = NULL;
extern void *ptr_MFCreateASFSplitter;
void *ptr_MFCreateASFSplitter = NULL;
extern void *ptr_MFCreateASFStreamSelector;
void *ptr_MFCreateASFStreamSelector = NULL;
extern void *ptr_MFCreateASFStreamingMediaSink;
void *ptr_MFCreateASFStreamingMediaSink = NULL;
extern void *ptr_MFCreateASFStreamingMediaSinkActivate;
void *ptr_MFCreateASFStreamingMediaSinkActivate = NULL;
extern void *ptr_MFCreateAggregateSource;
void *ptr_MFCreateAggregateSource = NULL;
extern void *ptr_MFCreateAppSourceProxy;
void *ptr_MFCreateAppSourceProxy = NULL;
extern void *ptr_MFCreateAudioRenderer;
void *ptr_MFCreateAudioRenderer = NULL;
extern void *ptr_MFCreateAudioRendererActivate;
void *ptr_MFCreateAudioRendererActivate = NULL;
extern void *ptr_MFCreateByteCacheFile;
void *ptr_MFCreateByteCacheFile = NULL;
extern void *ptr_MFCreateCacheManager;
void *ptr_MFCreateCacheManager = NULL;
extern void *ptr_MFCreateCredentialCache;
void *ptr_MFCreateCredentialCache = NULL;
extern void *ptr_MFCreateDeviceSource;
void *ptr_MFCreateDeviceSource = NULL;
extern void *ptr_MFCreateDeviceSourceActivate;
void *ptr_MFCreateDeviceSourceActivate = NULL;
extern void *ptr_MFCreateDrmNetNDSchemePlugin;
void *ptr_MFCreateDrmNetNDSchemePlugin = NULL;
extern void *ptr_MFCreateFileBlockMap;
void *ptr_MFCreateFileBlockMap = NULL;
extern void *ptr_MFCreateFileSchemePlugin;
void *ptr_MFCreateFileSchemePlugin = NULL;
extern void *ptr_MFCreateHttpSchemePlugin;
void *ptr_MFCreateHttpSchemePlugin = NULL;
extern void *ptr_MFCreateLPCMByteStreamPlugin;
void *ptr_MFCreateLPCMByteStreamPlugin = NULL;
extern void *ptr_MFCreateMP3ByteStreamPlugin;
void *ptr_MFCreateMP3ByteStreamPlugin = NULL;
extern void *ptr_MFCreateMP3MediaSink;
void *ptr_MFCreateMP3MediaSink = NULL;
extern void *ptr_MFCreateMPEG4MediaSink;
void *ptr_MFCreateMPEG4MediaSink = NULL;
extern void *ptr_MFCreateMediaProcessor;
void *ptr_MFCreateMediaProcessor = NULL;
extern void *ptr_MFCreateMediaSession;
void *ptr_MFCreateMediaSession = NULL;
extern void *ptr_MFCreateNSCByteStreamPlugin;
void *ptr_MFCreateNSCByteStreamPlugin = NULL;
extern void *ptr_MFCreateNetSchemePlugin;
void *ptr_MFCreateNetSchemePlugin = NULL;
extern void *ptr_MFCreatePMPHost;
void *ptr_MFCreatePMPHost = NULL;
extern void *ptr_MFCreatePMPMediaSession;
void *ptr_MFCreatePMPMediaSession = NULL;
extern void *ptr_MFCreatePMPServer;
void *ptr_MFCreatePMPServer = NULL;
extern void *ptr_MFCreatePresentationClock;
void *ptr_MFCreatePresentationClock = NULL;
extern void *ptr_MFCreatePresentationDescriptorFromASFProfile;
void *ptr_MFCreatePresentationDescriptorFromASFProfile = NULL;
extern void *ptr_MFCreateProxyLocator;
void *ptr_MFCreateProxyLocator = NULL;
extern void *ptr_MFCreateRemoteDesktopPlugin;
void *ptr_MFCreateRemoteDesktopPlugin = NULL;
extern void *ptr_MFCreateSAMIByteStreamPlugin;
void *ptr_MFCreateSAMIByteStreamPlugin = NULL;
extern void *ptr_MFCreateSampleCopierMFT;
void *ptr_MFCreateSampleCopierMFT = NULL;
extern void *ptr_MFCreateSampleGrabberSinkActivate;
void *ptr_MFCreateSampleGrabberSinkActivate = NULL;
extern void *ptr_MFCreateSecureHttpSchemePlugin;
void *ptr_MFCreateSecureHttpSchemePlugin = NULL;
extern void *ptr_MFCreateSequencerSegmentOffset;
void *ptr_MFCreateSequencerSegmentOffset = NULL;
extern void *ptr_MFCreateSequencerSource;
void *ptr_MFCreateSequencerSource = NULL;
extern void *ptr_MFCreateSequencerSourceRemoteStream;
void *ptr_MFCreateSequencerSourceRemoteStream = NULL;
extern void *ptr_MFCreateSimpleTypeHandler;
void *ptr_MFCreateSimpleTypeHandler = NULL;
extern void *ptr_MFCreateSourceResolver;
void *ptr_MFCreateSourceResolver = NULL;
extern void *ptr_MFCreateStandardQualityManager;
void *ptr_MFCreateStandardQualityManager = NULL;
extern void *ptr_MFCreateTopoLoader;
void *ptr_MFCreateTopoLoader = NULL;
extern void *ptr_MFCreateTopology;
void *ptr_MFCreateTopology = NULL;
extern void *ptr_MFCreateTopologyNode;
void *ptr_MFCreateTopologyNode = NULL;
extern void *ptr_MFCreateTranscodeProfile;
void *ptr_MFCreateTranscodeProfile = NULL;
extern void *ptr_MFCreateTranscodeSinkActivate;
void *ptr_MFCreateTranscodeSinkActivate = NULL;
extern void *ptr_MFCreateTranscodeTopology;
void *ptr_MFCreateTranscodeTopology = NULL;
extern void *ptr_MFCreateUrlmonSchemePlugin;
void *ptr_MFCreateUrlmonSchemePlugin = NULL;
extern void *ptr_MFCreateVideoRenderer;
void *ptr_MFCreateVideoRenderer = NULL;
extern void *ptr_MFCreateVideoRendererActivate;
void *ptr_MFCreateVideoRendererActivate = NULL;
extern void *ptr_MFCreateWMAEncoderActivate;
void *ptr_MFCreateWMAEncoderActivate = NULL;
extern void *ptr_MFCreateWMVEncoderActivate;
void *ptr_MFCreateWMVEncoderActivate = NULL;
extern void *ptr_MFEnumDeviceSources;
void *ptr_MFEnumDeviceSources = NULL;
extern void *ptr_MFGetMultipleServiceProviders;
void *ptr_MFGetMultipleServiceProviders = NULL;
extern void *ptr_MFGetService;
void *ptr_MFGetService = NULL;
extern void *ptr_MFGetSupportedMimeTypes;
void *ptr_MFGetSupportedMimeTypes = NULL;
extern void *ptr_MFGetSupportedSchemes;
void *ptr_MFGetSupportedSchemes = NULL;
extern void *ptr_MFGetTopoNodeCurrentType;
void *ptr_MFGetTopoNodeCurrentType = NULL;
extern void *ptr_MFReadSequencerSegmentOffset;
void *ptr_MFReadSequencerSegmentOffset = NULL;
extern void *ptr_MFRequireProtectedEnvironment;
void *ptr_MFRequireProtectedEnvironment = NULL;
extern void *ptr_MFShutdownObject;
void *ptr_MFShutdownObject = NULL;
extern void *ptr_MFTranscodeGetAudioOutputAvailableTypes;
void *ptr_MFTranscodeGetAudioOutputAvailableTypes = NULL;
extern void *ptr_MergePropertyStore;
void *ptr_MergePropertyStore = NULL;
}


static HMODULE hModule = NULL;
static void module_init()
{    
   if (hModule) return;
   wchar_t sz_module_file[MAX_PATH];
   GetSystemDirectoryW(sz_module_file, MAX_PATH);
   wcscat_s(sz_module_file, L"\\mf.dll");
   hModule = LoadLibraryW(sz_module_file);
   if (!hModule) return;

   #define __vartype(x) decltype(x)
   ptr_AppendPropVariant = (__vartype(ptr_AppendPropVariant))GetProcAddress(hModule, "AppendPropVariant");
   ptr_ConvertPropVariant = (__vartype(ptr_ConvertPropVariant))GetProcAddress(hModule, "ConvertPropVariant");
   ptr_CopyPropertyStore = (__vartype(ptr_CopyPropertyStore))GetProcAddress(hModule, "CopyPropertyStore");
   ptr_CreateNamedPropertyStore = (__vartype(ptr_CreateNamedPropertyStore))GetProcAddress(hModule, "CreateNamedPropertyStore");
   ptr_DllCanUnloadNow = (__vartype(ptr_DllCanUnloadNow))GetProcAddress(hModule, "DllCanUnloadNow");
   ptr_DllGetClassObject = (__vartype(ptr_DllGetClassObject))GetProcAddress(hModule, "DllGetClassObject");
   ptr_DllRegisterServer = (__vartype(ptr_DllRegisterServer))GetProcAddress(hModule, "DllRegisterServer");
   ptr_DllUnregisterServer = (__vartype(ptr_DllUnregisterServer))GetProcAddress(hModule, "DllUnregisterServer");
   ptr_ExtractPropVariant = (__vartype(ptr_ExtractPropVariant))GetProcAddress(hModule, "ExtractPropVariant");
   ptr_MFCreate3GPMediaSink = (__vartype(ptr_MFCreate3GPMediaSink))GetProcAddress(hModule, "MFCreate3GPMediaSink");
   ptr_MFCreateASFByteStreamPlugin = (__vartype(ptr_MFCreateASFByteStreamPlugin))GetProcAddress(hModule, "MFCreateASFByteStreamPlugin");
   ptr_MFCreateASFContentInfo = (__vartype(ptr_MFCreateASFContentInfo))GetProcAddress(hModule, "MFCreateASFContentInfo");
   ptr_MFCreateASFIndexer = (__vartype(ptr_MFCreateASFIndexer))GetProcAddress(hModule, "MFCreateASFIndexer");
   ptr_MFCreateASFIndexerByteStream = (__vartype(ptr_MFCreateASFIndexerByteStream))GetProcAddress(hModule, "MFCreateASFIndexerByteStream");
   ptr_MFCreateASFMediaSink = (__vartype(ptr_MFCreateASFMediaSink))GetProcAddress(hModule, "MFCreateASFMediaSink");
   ptr_MFCreateASFMediaSinkActivate = (__vartype(ptr_MFCreateASFMediaSinkActivate))GetProcAddress(hModule, "MFCreateASFMediaSinkActivate");
   ptr_MFCreateASFMultiplexer = (__vartype(ptr_MFCreateASFMultiplexer))GetProcAddress(hModule, "MFCreateASFMultiplexer");
   ptr_MFCreateASFProfile = (__vartype(ptr_MFCreateASFProfile))GetProcAddress(hModule, "MFCreateASFProfile");
   ptr_MFCreateASFProfileFromPresentationDescriptor = (__vartype(ptr_MFCreateASFProfileFromPresentationDescriptor))GetProcAddress(hModule, "MFCreateASFProfileFromPresentationDescriptor");
   ptr_MFCreateASFSplitter = (__vartype(ptr_MFCreateASFSplitter))GetProcAddress(hModule, "MFCreateASFSplitter");
   ptr_MFCreateASFStreamSelector = (__vartype(ptr_MFCreateASFStreamSelector))GetProcAddress(hModule, "MFCreateASFStreamSelector");
   ptr_MFCreateASFStreamingMediaSink = (__vartype(ptr_MFCreateASFStreamingMediaSink))GetProcAddress(hModule, "MFCreateASFStreamingMediaSink");
   ptr_MFCreateASFStreamingMediaSinkActivate = (__vartype(ptr_MFCreateASFStreamingMediaSinkActivate))GetProcAddress(hModule, "MFCreateASFStreamingMediaSinkActivate");
   ptr_MFCreateAggregateSource = (__vartype(ptr_MFCreateAggregateSource))GetProcAddress(hModule, "MFCreateAggregateSource");
   ptr_MFCreateAppSourceProxy = (__vartype(ptr_MFCreateAppSourceProxy))GetProcAddress(hModule, "MFCreateAppSourceProxy");
   ptr_MFCreateAudioRenderer = (__vartype(ptr_MFCreateAudioRenderer))GetProcAddress(hModule, "MFCreateAudioRenderer");
   ptr_MFCreateAudioRendererActivate = (__vartype(ptr_MFCreateAudioRendererActivate))GetProcAddress(hModule, "MFCreateAudioRendererActivate");
   ptr_MFCreateByteCacheFile = (__vartype(ptr_MFCreateByteCacheFile))GetProcAddress(hModule, "MFCreateByteCacheFile");
   ptr_MFCreateCacheManager = (__vartype(ptr_MFCreateCacheManager))GetProcAddress(hModule, "MFCreateCacheManager");
   ptr_MFCreateCredentialCache = (__vartype(ptr_MFCreateCredentialCache))GetProcAddress(hModule, "MFCreateCredentialCache");
   ptr_MFCreateDeviceSource = (__vartype(ptr_MFCreateDeviceSource))GetProcAddress(hModule, "MFCreateDeviceSource");
   ptr_MFCreateDeviceSourceActivate = (__vartype(ptr_MFCreateDeviceSourceActivate))GetProcAddress(hModule, "MFCreateDeviceSourceActivate");
   ptr_MFCreateDrmNetNDSchemePlugin = (__vartype(ptr_MFCreateDrmNetNDSchemePlugin))GetProcAddress(hModule, "MFCreateDrmNetNDSchemePlugin");
   ptr_MFCreateFileBlockMap = (__vartype(ptr_MFCreateFileBlockMap))GetProcAddress(hModule, "MFCreateFileBlockMap");
   ptr_MFCreateFileSchemePlugin = (__vartype(ptr_MFCreateFileSchemePlugin))GetProcAddress(hModule, "MFCreateFileSchemePlugin");
   ptr_MFCreateHttpSchemePlugin = (__vartype(ptr_MFCreateHttpSchemePlugin))GetProcAddress(hModule, "MFCreateHttpSchemePlugin");
   ptr_MFCreateLPCMByteStreamPlugin = (__vartype(ptr_MFCreateLPCMByteStreamPlugin))GetProcAddress(hModule, "MFCreateLPCMByteStreamPlugin");
   ptr_MFCreateMP3ByteStreamPlugin = (__vartype(ptr_MFCreateMP3ByteStreamPlugin))GetProcAddress(hModule, "MFCreateMP3ByteStreamPlugin");
   ptr_MFCreateMP3MediaSink = (__vartype(ptr_MFCreateMP3MediaSink))GetProcAddress(hModule, "MFCreateMP3MediaSink");
   ptr_MFCreateMPEG4MediaSink = (__vartype(ptr_MFCreateMPEG4MediaSink))GetProcAddress(hModule, "MFCreateMPEG4MediaSink");
   ptr_MFCreateMediaProcessor = (__vartype(ptr_MFCreateMediaProcessor))GetProcAddress(hModule, "MFCreateMediaProcessor");
   ptr_MFCreateMediaSession = (__vartype(ptr_MFCreateMediaSession))GetProcAddress(hModule, "MFCreateMediaSession");
   ptr_MFCreateNSCByteStreamPlugin = (__vartype(ptr_MFCreateNSCByteStreamPlugin))GetProcAddress(hModule, "MFCreateNSCByteStreamPlugin");
   ptr_MFCreateNetSchemePlugin = (__vartype(ptr_MFCreateNetSchemePlugin))GetProcAddress(hModule, "MFCreateNetSchemePlugin");
   ptr_MFCreatePMPHost = (__vartype(ptr_MFCreatePMPHost))GetProcAddress(hModule, "MFCreatePMPHost");
   ptr_MFCreatePMPMediaSession = (__vartype(ptr_MFCreatePMPMediaSession))GetProcAddress(hModule, "MFCreatePMPMediaSession");
   ptr_MFCreatePMPServer = (__vartype(ptr_MFCreatePMPServer))GetProcAddress(hModule, "MFCreatePMPServer");
   ptr_MFCreatePresentationClock = (__vartype(ptr_MFCreatePresentationClock))GetProcAddress(hModule, "MFCreatePresentationClock");
   ptr_MFCreatePresentationDescriptorFromASFProfile = (__vartype(ptr_MFCreatePresentationDescriptorFromASFProfile))GetProcAddress(hModule, "MFCreatePresentationDescriptorFromASFProfile");
   ptr_MFCreateProxyLocator = (__vartype(ptr_MFCreateProxyLocator))GetProcAddress(hModule, "MFCreateProxyLocator");
   ptr_MFCreateRemoteDesktopPlugin = (__vartype(ptr_MFCreateRemoteDesktopPlugin))GetProcAddress(hModule, "MFCreateRemoteDesktopPlugin");
   ptr_MFCreateSAMIByteStreamPlugin = (__vartype(ptr_MFCreateSAMIByteStreamPlugin))GetProcAddress(hModule, "MFCreateSAMIByteStreamPlugin");
   ptr_MFCreateSampleCopierMFT = (__vartype(ptr_MFCreateSampleCopierMFT))GetProcAddress(hModule, "MFCreateSampleCopierMFT");
   ptr_MFCreateSampleGrabberSinkActivate = (__vartype(ptr_MFCreateSampleGrabberSinkActivate))GetProcAddress(hModule, "MFCreateSampleGrabberSinkActivate");
   ptr_MFCreateSecureHttpSchemePlugin = (__vartype(ptr_MFCreateSecureHttpSchemePlugin))GetProcAddress(hModule, "MFCreateSecureHttpSchemePlugin");
   ptr_MFCreateSequencerSegmentOffset = (__vartype(ptr_MFCreateSequencerSegmentOffset))GetProcAddress(hModule, "MFCreateSequencerSegmentOffset");
   ptr_MFCreateSequencerSource = (__vartype(ptr_MFCreateSequencerSource))GetProcAddress(hModule, "MFCreateSequencerSource");
   ptr_MFCreateSequencerSourceRemoteStream = (__vartype(ptr_MFCreateSequencerSourceRemoteStream))GetProcAddress(hModule, "MFCreateSequencerSourceRemoteStream");
   ptr_MFCreateSimpleTypeHandler = (__vartype(ptr_MFCreateSimpleTypeHandler))GetProcAddress(hModule, "MFCreateSimpleTypeHandler");
   ptr_MFCreateSourceResolver = (__vartype(ptr_MFCreateSourceResolver))GetProcAddress(hModule, "MFCreateSourceResolver");
   ptr_MFCreateStandardQualityManager = (__vartype(ptr_MFCreateStandardQualityManager))GetProcAddress(hModule, "MFCreateStandardQualityManager");
   ptr_MFCreateTopoLoader = (__vartype(ptr_MFCreateTopoLoader))GetProcAddress(hModule, "MFCreateTopoLoader");
   ptr_MFCreateTopology = (__vartype(ptr_MFCreateTopology))GetProcAddress(hModule, "MFCreateTopology");
   ptr_MFCreateTopologyNode = (__vartype(ptr_MFCreateTopologyNode))GetProcAddress(hModule, "MFCreateTopologyNode");
   ptr_MFCreateTranscodeProfile = (__vartype(ptr_MFCreateTranscodeProfile))GetProcAddress(hModule, "MFCreateTranscodeProfile");
   ptr_MFCreateTranscodeSinkActivate = (__vartype(ptr_MFCreateTranscodeSinkActivate))GetProcAddress(hModule, "MFCreateTranscodeSinkActivate");
   ptr_MFCreateTranscodeTopology = (__vartype(ptr_MFCreateTranscodeTopology))GetProcAddress(hModule, "MFCreateTranscodeTopology");
   ptr_MFCreateUrlmonSchemePlugin = (__vartype(ptr_MFCreateUrlmonSchemePlugin))GetProcAddress(hModule, "MFCreateUrlmonSchemePlugin");
   ptr_MFCreateVideoRenderer = (__vartype(ptr_MFCreateVideoRenderer))GetProcAddress(hModule, "MFCreateVideoRenderer");
   ptr_MFCreateVideoRendererActivate = (__vartype(ptr_MFCreateVideoRendererActivate))GetProcAddress(hModule, "MFCreateVideoRendererActivate");
   ptr_MFCreateWMAEncoderActivate = (__vartype(ptr_MFCreateWMAEncoderActivate))GetProcAddress(hModule, "MFCreateWMAEncoderActivate");
   ptr_MFCreateWMVEncoderActivate = (__vartype(ptr_MFCreateWMVEncoderActivate))GetProcAddress(hModule, "MFCreateWMVEncoderActivate");
   ptr_MFEnumDeviceSources = (__vartype(ptr_MFEnumDeviceSources))GetProcAddress(hModule, "MFEnumDeviceSources");
   ptr_MFGetMultipleServiceProviders = (__vartype(ptr_MFGetMultipleServiceProviders))GetProcAddress(hModule, "MFGetMultipleServiceProviders");
   ptr_MFGetService = (__vartype(ptr_MFGetService))GetProcAddress(hModule, "MFGetService");
   ptr_MFGetSupportedMimeTypes = (__vartype(ptr_MFGetSupportedMimeTypes))GetProcAddress(hModule, "MFGetSupportedMimeTypes");
   ptr_MFGetSupportedSchemes = (__vartype(ptr_MFGetSupportedSchemes))GetProcAddress(hModule, "MFGetSupportedSchemes");
   ptr_MFGetTopoNodeCurrentType = (__vartype(ptr_MFGetTopoNodeCurrentType))GetProcAddress(hModule, "MFGetTopoNodeCurrentType");
   ptr_MFReadSequencerSegmentOffset = (__vartype(ptr_MFReadSequencerSegmentOffset))GetProcAddress(hModule, "MFReadSequencerSegmentOffset");
   ptr_MFRequireProtectedEnvironment = (__vartype(ptr_MFRequireProtectedEnvironment))GetProcAddress(hModule, "MFRequireProtectedEnvironment");
   ptr_MFShutdownObject = (__vartype(ptr_MFShutdownObject))GetProcAddress(hModule, "MFShutdownObject");
   ptr_MFTranscodeGetAudioOutputAvailableTypes = (__vartype(ptr_MFTranscodeGetAudioOutputAvailableTypes))GetProcAddress(hModule, "MFTranscodeGetAudioOutputAvailableTypes");
   ptr_MergePropertyStore = (__vartype(ptr_MergePropertyStore))GetProcAddress(hModule, "MergePropertyStore");
   #undef __vartype
}

extern "C" BOOL __stdcall DllMain( HMODULE hModule,	DWORD ul_reason_for_call,LPVOID lpReserved)
{
	switch (ul_reason_for_call)
	{
	case DLL_PROCESS_ATTACH:
    {
        module_init();
        wchar_t tmp1[2048];
        GetModuleFileNameW(NULL, tmp1, _countof(tmp1));
        PathRemoveExtensionW(tmp1);
        wcscat(tmp1, L".hook.dll");
        LoadLibraryW(tmp1);
        break;
    }
	case DLL_PROCESS_DETACH:
		break;
	}
	return TRUE;
}

